/* soapH.h
   Generated by gSOAP 2.8.23 from test.hpp

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data), 0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data), 0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (9)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data), 0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_stringArray
#define SOAP_TYPE_stringArray (8)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_stringArray(struct soap*, const char*, int, const stringArray *, const char*);
SOAP_FMAC3 stringArray * SOAP_FMAC4 soap_in_stringArray(struct soap*, const char*, stringArray *, const char*);

#ifndef soap_write_stringArray
#define soap_write_stringArray(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 stringArray * SOAP_FMAC4 soap_get_stringArray(struct soap*, stringArray *, const char*, const char*);

#ifndef soap_read_stringArray
#define soap_read_stringArray(soap, data) ( soap_begin_recv(soap) || !soap_get_stringArray(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 stringArray * SOAP_FMAC2 soap_instantiate_stringArray(struct soap*, int, const char*, const char*, size_t*);

inline stringArray * soap_new_stringArray(struct soap *soap, int n = -1) { return soap_instantiate_stringArray(soap, n, NULL, NULL, NULL); }

inline stringArray * soap_new_req_stringArray(struct soap *soap) { stringArray *_p = soap_instantiate_stringArray(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline stringArray * soap_new_set_stringArray(struct soap *soap, std::string *__ptr, int __size) { stringArray *_p = soap_instantiate_stringArray(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->stringArray::__ptr = __ptr; _p->stringArray::__size = __size; } return _p; }

inline void soap_delete_stringArray(struct soap *soap, stringArray *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_stringArray(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (32)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_ns1__PlayWord
#define SOAP_TYPE_ns1__PlayWord (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__PlayWord(struct soap*, struct ns1__PlayWord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__PlayWord(struct soap*, const struct ns1__PlayWord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PlayWord(struct soap*, const char*, int, const struct ns1__PlayWord *, const char*);
SOAP_FMAC3 struct ns1__PlayWord * SOAP_FMAC4 soap_in_ns1__PlayWord(struct soap*, const char*, struct ns1__PlayWord *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__PlayWord(struct soap*, const struct ns1__PlayWord *, const char*, const char*);

#ifndef soap_write_ns1__PlayWord
#define soap_write_ns1__PlayWord(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__PlayWord(soap, data), 0) || soap_put_ns1__PlayWord(soap, data, "ns1:PlayWord", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__PlayWord * SOAP_FMAC4 soap_get_ns1__PlayWord(struct soap*, struct ns1__PlayWord *, const char*, const char*);

#ifndef soap_read_ns1__PlayWord
#define soap_read_ns1__PlayWord(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__PlayWord(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__PlayWord * SOAP_FMAC2 soap_instantiate_ns1__PlayWord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__PlayWord * soap_new_ns1__PlayWord(struct soap *soap, int n = -1) { return soap_instantiate_ns1__PlayWord(soap, n, NULL, NULL, NULL); }

inline struct ns1__PlayWord * soap_new_req_ns1__PlayWord(struct soap *soap, int _id, int _value, int _direction) { struct ns1__PlayWord *_p = soap_instantiate_ns1__PlayWord(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__PlayWord(soap, _p); _p->_id = _id; _p->_value = _value; _p->_direction = _direction; } return _p; }

inline struct ns1__PlayWord * soap_new_set_ns1__PlayWord(struct soap *soap, int _id, int _value, int _direction) { struct ns1__PlayWord *_p = soap_instantiate_ns1__PlayWord(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__PlayWord(soap, _p); _p->_id = _id; _p->_value = _value; _p->_direction = _direction; } return _p; }

inline void soap_delete_ns1__PlayWord(struct soap *soap, struct ns1__PlayWord *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__PlayWord(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__PlayWordResponse
#define SOAP_TYPE_ns1__PlayWordResponse (25)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__PlayWordResponse(struct soap*, struct ns1__PlayWordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__PlayWordResponse(struct soap*, const struct ns1__PlayWordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PlayWordResponse(struct soap*, const char*, int, const struct ns1__PlayWordResponse *, const char*);
SOAP_FMAC3 struct ns1__PlayWordResponse * SOAP_FMAC4 soap_in_ns1__PlayWordResponse(struct soap*, const char*, struct ns1__PlayWordResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__PlayWordResponse(struct soap*, const struct ns1__PlayWordResponse *, const char*, const char*);

#ifndef soap_write_ns1__PlayWordResponse
#define soap_write_ns1__PlayWordResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__PlayWordResponse(soap, data), 0) || soap_put_ns1__PlayWordResponse(soap, data, "ns1:PlayWordResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__PlayWordResponse * SOAP_FMAC4 soap_get_ns1__PlayWordResponse(struct soap*, struct ns1__PlayWordResponse *, const char*, const char*);

#ifndef soap_read_ns1__PlayWordResponse
#define soap_read_ns1__PlayWordResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__PlayWordResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__PlayWordResponse * SOAP_FMAC2 soap_instantiate_ns1__PlayWordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__PlayWordResponse * soap_new_ns1__PlayWordResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__PlayWordResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__PlayWordResponse * soap_new_req_ns1__PlayWordResponse(struct soap *soap) { struct ns1__PlayWordResponse *_p = soap_instantiate_ns1__PlayWordResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__PlayWordResponse(soap, _p); } return _p; }

inline struct ns1__PlayWordResponse * soap_new_set_ns1__PlayWordResponse(struct soap *soap, stringArray *_return_) { struct ns1__PlayWordResponse *_p = soap_instantiate_ns1__PlayWordResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__PlayWordResponse(soap, _p); _p->_return_ = _return_; } return _p; }

inline void soap_delete_ns1__PlayWordResponse(struct soap *soap, struct ns1__PlayWordResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__PlayWordResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__GetWord
#define SOAP_TYPE_ns1__GetWord (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetWord(struct soap*, struct ns1__GetWord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetWord(struct soap*, const struct ns1__GetWord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetWord(struct soap*, const char*, int, const struct ns1__GetWord *, const char*);
SOAP_FMAC3 struct ns1__GetWord * SOAP_FMAC4 soap_in_ns1__GetWord(struct soap*, const char*, struct ns1__GetWord *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetWord(struct soap*, const struct ns1__GetWord *, const char*, const char*);

#ifndef soap_write_ns1__GetWord
#define soap_write_ns1__GetWord(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__GetWord(soap, data), 0) || soap_put_ns1__GetWord(soap, data, "ns1:GetWord", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__GetWord * SOAP_FMAC4 soap_get_ns1__GetWord(struct soap*, struct ns1__GetWord *, const char*, const char*);

#ifndef soap_read_ns1__GetWord
#define soap_read_ns1__GetWord(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__GetWord(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__GetWord * SOAP_FMAC2 soap_instantiate_ns1__GetWord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetWord * soap_new_ns1__GetWord(struct soap *soap, int n = -1) { return soap_instantiate_ns1__GetWord(soap, n, NULL, NULL, NULL); }

inline struct ns1__GetWord * soap_new_req_ns1__GetWord(struct soap *soap, const std::string& _range) { struct ns1__GetWord *_p = soap_instantiate_ns1__GetWord(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__GetWord(soap, _p); _p->_range = _range; } return _p; }

inline struct ns1__GetWord * soap_new_set_ns1__GetWord(struct soap *soap, const std::string& _range, stringArray *_opt) { struct ns1__GetWord *_p = soap_instantiate_ns1__GetWord(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__GetWord(soap, _p); _p->_range = _range; _p->_opt = _opt; } return _p; }

inline void soap_delete_ns1__GetWord(struct soap *soap, struct ns1__GetWord *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__GetWord(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__GetWordResponse
#define SOAP_TYPE_ns1__GetWordResponse (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetWordResponse(struct soap*, struct ns1__GetWordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetWordResponse(struct soap*, const struct ns1__GetWordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetWordResponse(struct soap*, const char*, int, const struct ns1__GetWordResponse *, const char*);
SOAP_FMAC3 struct ns1__GetWordResponse * SOAP_FMAC4 soap_in_ns1__GetWordResponse(struct soap*, const char*, struct ns1__GetWordResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetWordResponse(struct soap*, const struct ns1__GetWordResponse *, const char*, const char*);

#ifndef soap_write_ns1__GetWordResponse
#define soap_write_ns1__GetWordResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__GetWordResponse(soap, data), 0) || soap_put_ns1__GetWordResponse(soap, data, "ns1:GetWordResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__GetWordResponse * SOAP_FMAC4 soap_get_ns1__GetWordResponse(struct soap*, struct ns1__GetWordResponse *, const char*, const char*);

#ifndef soap_read_ns1__GetWordResponse
#define soap_read_ns1__GetWordResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__GetWordResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__GetWordResponse * SOAP_FMAC2 soap_instantiate_ns1__GetWordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetWordResponse * soap_new_ns1__GetWordResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__GetWordResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__GetWordResponse * soap_new_req_ns1__GetWordResponse(struct soap *soap) { struct ns1__GetWordResponse *_p = soap_instantiate_ns1__GetWordResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__GetWordResponse(soap, _p); } return _p; }

inline struct ns1__GetWordResponse * soap_new_set_ns1__GetWordResponse(struct soap *soap, stringArray *_return_) { struct ns1__GetWordResponse *_p = soap_instantiate_ns1__GetWordResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__GetWordResponse(soap, _p); _p->_return_ = _return_; } return _p; }

inline void soap_delete_ns1__GetWordResponse(struct soap *soap, struct ns1__GetWordResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__GetWordResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__SendWord
#define SOAP_TYPE_ns1__SendWord (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SendWord(struct soap*, struct ns1__SendWord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SendWord(struct soap*, const struct ns1__SendWord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SendWord(struct soap*, const char*, int, const struct ns1__SendWord *, const char*);
SOAP_FMAC3 struct ns1__SendWord * SOAP_FMAC4 soap_in_ns1__SendWord(struct soap*, const char*, struct ns1__SendWord *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SendWord(struct soap*, const struct ns1__SendWord *, const char*, const char*);

#ifndef soap_write_ns1__SendWord
#define soap_write_ns1__SendWord(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__SendWord(soap, data), 0) || soap_put_ns1__SendWord(soap, data, "ns1:SendWord", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__SendWord * SOAP_FMAC4 soap_get_ns1__SendWord(struct soap*, struct ns1__SendWord *, const char*, const char*);

#ifndef soap_read_ns1__SendWord
#define soap_read_ns1__SendWord(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__SendWord(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__SendWord * SOAP_FMAC2 soap_instantiate_ns1__SendWord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__SendWord * soap_new_ns1__SendWord(struct soap *soap, int n = -1) { return soap_instantiate_ns1__SendWord(soap, n, NULL, NULL, NULL); }

inline struct ns1__SendWord * soap_new_req_ns1__SendWord(struct soap *soap, const std::string& _word_USCOREa, const std::string& _word_USCOREb, const std::string& _lang_USCOREa, const std::string& _lang_USCOREb) { struct ns1__SendWord *_p = soap_instantiate_ns1__SendWord(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__SendWord(soap, _p); _p->_word_USCOREa = _word_USCOREa; _p->_word_USCOREb = _word_USCOREb; _p->_lang_USCOREa = _lang_USCOREa; _p->_lang_USCOREb = _lang_USCOREb; } return _p; }

inline struct ns1__SendWord * soap_new_set_ns1__SendWord(struct soap *soap, const std::string& _word_USCOREa, const std::string& _word_USCOREb, const std::string& _lang_USCOREa, const std::string& _lang_USCOREb) { struct ns1__SendWord *_p = soap_instantiate_ns1__SendWord(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__SendWord(soap, _p); _p->_word_USCOREa = _word_USCOREa; _p->_word_USCOREb = _word_USCOREb; _p->_lang_USCOREa = _lang_USCOREa; _p->_lang_USCOREb = _lang_USCOREb; } return _p; }

inline void soap_delete_ns1__SendWord(struct soap *soap, struct ns1__SendWord *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__SendWord(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__SendWordResponse
#define SOAP_TYPE_ns1__SendWordResponse (17)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SendWordResponse(struct soap*, struct ns1__SendWordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SendWordResponse(struct soap*, const struct ns1__SendWordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SendWordResponse(struct soap*, const char*, int, const struct ns1__SendWordResponse *, const char*);
SOAP_FMAC3 struct ns1__SendWordResponse * SOAP_FMAC4 soap_in_ns1__SendWordResponse(struct soap*, const char*, struct ns1__SendWordResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SendWordResponse(struct soap*, const struct ns1__SendWordResponse *, const char*, const char*);

#ifndef soap_write_ns1__SendWordResponse
#define soap_write_ns1__SendWordResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__SendWordResponse(soap, data), 0) || soap_put_ns1__SendWordResponse(soap, data, "ns1:SendWordResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__SendWordResponse * SOAP_FMAC4 soap_get_ns1__SendWordResponse(struct soap*, struct ns1__SendWordResponse *, const char*, const char*);

#ifndef soap_read_ns1__SendWordResponse
#define soap_read_ns1__SendWordResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__SendWordResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__SendWordResponse * SOAP_FMAC2 soap_instantiate_ns1__SendWordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__SendWordResponse * soap_new_ns1__SendWordResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__SendWordResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__SendWordResponse * soap_new_req_ns1__SendWordResponse(struct soap *soap) { struct ns1__SendWordResponse *_p = soap_instantiate_ns1__SendWordResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__SendWordResponse(soap, _p); } return _p; }

inline struct ns1__SendWordResponse * soap_new_set_ns1__SendWordResponse(struct soap *soap, stringArray *_return_) { struct ns1__SendWordResponse *_p = soap_instantiate_ns1__SendWordResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__SendWordResponse(soap, _p); _p->_return_ = _return_; } return _p; }

inline void soap_delete_ns1__SendWordResponse(struct soap *soap, struct ns1__SendWordResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__SendWordResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__AccountAuth
#define SOAP_TYPE_ns1__AccountAuth (16)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__AccountAuth(struct soap*, struct ns1__AccountAuth *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__AccountAuth(struct soap*, const struct ns1__AccountAuth *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AccountAuth(struct soap*, const char*, int, const struct ns1__AccountAuth *, const char*);
SOAP_FMAC3 struct ns1__AccountAuth * SOAP_FMAC4 soap_in_ns1__AccountAuth(struct soap*, const char*, struct ns1__AccountAuth *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AccountAuth(struct soap*, const struct ns1__AccountAuth *, const char*, const char*);

#ifndef soap_write_ns1__AccountAuth
#define soap_write_ns1__AccountAuth(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__AccountAuth(soap, data), 0) || soap_put_ns1__AccountAuth(soap, data, "ns1:AccountAuth", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__AccountAuth * SOAP_FMAC4 soap_get_ns1__AccountAuth(struct soap*, struct ns1__AccountAuth *, const char*, const char*);

#ifndef soap_read_ns1__AccountAuth
#define soap_read_ns1__AccountAuth(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__AccountAuth(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__AccountAuth * SOAP_FMAC2 soap_instantiate_ns1__AccountAuth(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__AccountAuth * soap_new_ns1__AccountAuth(struct soap *soap, int n = -1) { return soap_instantiate_ns1__AccountAuth(soap, n, NULL, NULL, NULL); }

inline struct ns1__AccountAuth * soap_new_req_ns1__AccountAuth(struct soap *soap, const std::string& _email, const std::string& _proj, const std::string& _timestamp, const std::string& _proj_USCOREhash, const std::string& _email_USCOREhash) { struct ns1__AccountAuth *_p = soap_instantiate_ns1__AccountAuth(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__AccountAuth(soap, _p); _p->_email = _email; _p->_proj = _proj; _p->_timestamp = _timestamp; _p->_proj_USCOREhash = _proj_USCOREhash; _p->_email_USCOREhash = _email_USCOREhash; } return _p; }

inline struct ns1__AccountAuth * soap_new_set_ns1__AccountAuth(struct soap *soap, const std::string& _email, const std::string& _proj, const std::string& _timestamp, const std::string& _proj_USCOREhash, const std::string& _email_USCOREhash) { struct ns1__AccountAuth *_p = soap_instantiate_ns1__AccountAuth(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__AccountAuth(soap, _p); _p->_email = _email; _p->_proj = _proj; _p->_timestamp = _timestamp; _p->_proj_USCOREhash = _proj_USCOREhash; _p->_email_USCOREhash = _email_USCOREhash; } return _p; }

inline void soap_delete_ns1__AccountAuth(struct soap *soap, struct ns1__AccountAuth *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__AccountAuth(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__AccountAuthResponse
#define SOAP_TYPE_ns1__AccountAuthResponse (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__AccountAuthResponse(struct soap*, struct ns1__AccountAuthResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__AccountAuthResponse(struct soap*, const struct ns1__AccountAuthResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AccountAuthResponse(struct soap*, const char*, int, const struct ns1__AccountAuthResponse *, const char*);
SOAP_FMAC3 struct ns1__AccountAuthResponse * SOAP_FMAC4 soap_in_ns1__AccountAuthResponse(struct soap*, const char*, struct ns1__AccountAuthResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AccountAuthResponse(struct soap*, const struct ns1__AccountAuthResponse *, const char*, const char*);

#ifndef soap_write_ns1__AccountAuthResponse
#define soap_write_ns1__AccountAuthResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__AccountAuthResponse(soap, data), 0) || soap_put_ns1__AccountAuthResponse(soap, data, "ns1:AccountAuthResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__AccountAuthResponse * SOAP_FMAC4 soap_get_ns1__AccountAuthResponse(struct soap*, struct ns1__AccountAuthResponse *, const char*, const char*);

#ifndef soap_read_ns1__AccountAuthResponse
#define soap_read_ns1__AccountAuthResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__AccountAuthResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__AccountAuthResponse * SOAP_FMAC2 soap_instantiate_ns1__AccountAuthResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__AccountAuthResponse * soap_new_ns1__AccountAuthResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__AccountAuthResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__AccountAuthResponse * soap_new_req_ns1__AccountAuthResponse(struct soap *soap) { struct ns1__AccountAuthResponse *_p = soap_instantiate_ns1__AccountAuthResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__AccountAuthResponse(soap, _p); } return _p; }

inline struct ns1__AccountAuthResponse * soap_new_set_ns1__AccountAuthResponse(struct soap *soap, stringArray *_return_) { struct ns1__AccountAuthResponse *_p = soap_instantiate_ns1__AccountAuthResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__AccountAuthResponse(soap, _p); _p->_return_ = _return_; } return _p; }

inline void soap_delete_ns1__AccountAuthResponse(struct soap *soap, struct ns1__AccountAuthResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__AccountAuthResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data), 0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (37)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data), 0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data), 0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTostringArray
#define SOAP_TYPE_PointerTostringArray (13)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostringArray(struct soap*, stringArray *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostringArray(struct soap*, const char *, int, stringArray *const*, const char *);
SOAP_FMAC3 stringArray ** SOAP_FMAC4 soap_in_PointerTostringArray(struct soap*, const char*, stringArray **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostringArray(struct soap*, stringArray *const*, const char*, const char*);

#ifndef soap_write_PointerTostringArray
#define soap_write_PointerTostringArray(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostringArray(soap, data), 0) || soap_put_PointerTostringArray(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 stringArray ** SOAP_FMAC4 soap_get_PointerTostringArray(struct soap*, stringArray **, const char*, const char*);

#ifndef soap_read_PointerTostringArray
#define soap_read_PointerTostringArray(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostringArray(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (10)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__string
#define soap_write_PointerTostd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__string(soap, data), 0) || soap_put_PointerTostd__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTostd__string
#define soap_read_PointerTostd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data), 0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data), 0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

/* End of soapH.h */
