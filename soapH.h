/* soapH.h
   Generated by gSOAP 2.8.23 from test.hpp

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data), 0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data), 0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (14)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_bool(soap, data), 0) || soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data), 0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_arrayOfInt
#define SOAP_TYPE_arrayOfInt (11)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_arrayOfInt(struct soap*, const char*, int, const arrayOfInt *, const char*);
SOAP_FMAC3 arrayOfInt * SOAP_FMAC4 soap_in_arrayOfInt(struct soap*, const char*, arrayOfInt *, const char*);

#ifndef soap_write_arrayOfInt
#define soap_write_arrayOfInt(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 arrayOfInt * SOAP_FMAC4 soap_get_arrayOfInt(struct soap*, arrayOfInt *, const char*, const char*);

#ifndef soap_read_arrayOfInt
#define soap_read_arrayOfInt(soap, data) ( soap_begin_recv(soap) || !soap_get_arrayOfInt(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 arrayOfInt * SOAP_FMAC2 soap_instantiate_arrayOfInt(struct soap*, int, const char*, const char*, size_t*);

inline arrayOfInt * soap_new_arrayOfInt(struct soap *soap, int n = -1) { return soap_instantiate_arrayOfInt(soap, n, NULL, NULL, NULL); }

inline arrayOfInt * soap_new_req_arrayOfInt(struct soap *soap) { arrayOfInt *_p = soap_instantiate_arrayOfInt(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline arrayOfInt * soap_new_set_arrayOfInt(struct soap *soap, int *__ptr, int __size) { arrayOfInt *_p = soap_instantiate_arrayOfInt(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->arrayOfInt::__ptr = __ptr; _p->arrayOfInt::__size = __size; } return _p; }

inline void soap_delete_arrayOfInt(struct soap *soap, arrayOfInt *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_arrayOfInt(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ComplexTypeDemoArray
#define SOAP_TYPE_ComplexTypeDemoArray (10)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ComplexTypeDemoArray(struct soap*, const char*, int, const ComplexTypeDemoArray *, const char*);
SOAP_FMAC3 ComplexTypeDemoArray * SOAP_FMAC4 soap_in_ComplexTypeDemoArray(struct soap*, const char*, ComplexTypeDemoArray *, const char*);

#ifndef soap_write_ComplexTypeDemoArray
#define soap_write_ComplexTypeDemoArray(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ComplexTypeDemoArray * SOAP_FMAC4 soap_get_ComplexTypeDemoArray(struct soap*, ComplexTypeDemoArray *, const char*, const char*);

#ifndef soap_read_ComplexTypeDemoArray
#define soap_read_ComplexTypeDemoArray(soap, data) ( soap_begin_recv(soap) || !soap_get_ComplexTypeDemoArray(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ComplexTypeDemoArray * SOAP_FMAC2 soap_instantiate_ComplexTypeDemoArray(struct soap*, int, const char*, const char*, size_t*);

inline ComplexTypeDemoArray * soap_new_ComplexTypeDemoArray(struct soap *soap, int n = -1) { return soap_instantiate_ComplexTypeDemoArray(soap, n, NULL, NULL, NULL); }

inline ComplexTypeDemoArray * soap_new_req_ComplexTypeDemoArray(struct soap *soap) { ComplexTypeDemoArray *_p = soap_instantiate_ComplexTypeDemoArray(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ComplexTypeDemoArray * soap_new_set_ComplexTypeDemoArray(struct soap *soap, ns1__ComplexTypeDemo **__ptr, int __size) { ComplexTypeDemoArray *_p = soap_instantiate_ComplexTypeDemoArray(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ComplexTypeDemoArray::__ptr = __ptr; _p->ComplexTypeDemoArray::__size = __size; } return _p; }

inline void soap_delete_ComplexTypeDemoArray(struct soap *soap, ComplexTypeDemoArray *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ComplexTypeDemoArray(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_stringArray
#define SOAP_TYPE_stringArray (9)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_stringArray(struct soap*, const char*, int, const stringArray *, const char*);
SOAP_FMAC3 stringArray * SOAP_FMAC4 soap_in_stringArray(struct soap*, const char*, stringArray *, const char*);

#ifndef soap_write_stringArray
#define soap_write_stringArray(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 stringArray * SOAP_FMAC4 soap_get_stringArray(struct soap*, stringArray *, const char*, const char*);

#ifndef soap_read_stringArray
#define soap_read_stringArray(soap, data) ( soap_begin_recv(soap) || !soap_get_stringArray(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 stringArray * SOAP_FMAC2 soap_instantiate_stringArray(struct soap*, int, const char*, const char*, size_t*);

inline stringArray * soap_new_stringArray(struct soap *soap, int n = -1) { return soap_instantiate_stringArray(soap, n, NULL, NULL, NULL); }

inline stringArray * soap_new_req_stringArray(struct soap *soap) { stringArray *_p = soap_instantiate_stringArray(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline stringArray * soap_new_set_stringArray(struct soap *soap, std::string *__ptr, int __size) { stringArray *_p = soap_instantiate_stringArray(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->stringArray::__ptr = __ptr; _p->stringArray::__size = __size; } return _p; }

inline void soap_delete_stringArray(struct soap *soap, stringArray *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_stringArray(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__ComplexTypeDemo
#define SOAP_TYPE_ns1__ComplexTypeDemo (8)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ComplexTypeDemo(struct soap*, const char*, int, const ns1__ComplexTypeDemo *, const char*);
SOAP_FMAC3 ns1__ComplexTypeDemo * SOAP_FMAC4 soap_in_ns1__ComplexTypeDemo(struct soap*, const char*, ns1__ComplexTypeDemo *, const char*);

#ifndef soap_write_ns1__ComplexTypeDemo
#define soap_write_ns1__ComplexTypeDemo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ComplexTypeDemo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ComplexTypeDemo * SOAP_FMAC4 soap_get_ns1__ComplexTypeDemo(struct soap*, ns1__ComplexTypeDemo *, const char*, const char*);

#ifndef soap_read_ns1__ComplexTypeDemo
#define soap_read_ns1__ComplexTypeDemo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__ComplexTypeDemo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__ComplexTypeDemo * SOAP_FMAC2 soap_instantiate_ns1__ComplexTypeDemo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ComplexTypeDemo * soap_new_ns1__ComplexTypeDemo(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ComplexTypeDemo(soap, n, NULL, NULL, NULL); }

inline ns1__ComplexTypeDemo * soap_new_req_ns1__ComplexTypeDemo(struct soap *soap, std::string *StringA, std::string *StringB, int Integer, bool Boolean) { ns1__ComplexTypeDemo *_p = soap_instantiate_ns1__ComplexTypeDemo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__ComplexTypeDemo::StringA = StringA; _p->ns1__ComplexTypeDemo::StringB = StringB; _p->ns1__ComplexTypeDemo::Integer = Integer; _p->ns1__ComplexTypeDemo::Boolean = Boolean; } return _p; }

inline ns1__ComplexTypeDemo * soap_new_set_ns1__ComplexTypeDemo(struct soap *soap, std::string *StringA, std::string *StringB, int Integer, bool Boolean) { ns1__ComplexTypeDemo *_p = soap_instantiate_ns1__ComplexTypeDemo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__ComplexTypeDemo::StringA = StringA; _p->ns1__ComplexTypeDemo::StringB = StringB; _p->ns1__ComplexTypeDemo::Integer = Integer; _p->ns1__ComplexTypeDemo::Boolean = Boolean; } return _p; }

inline void soap_delete_ns1__ComplexTypeDemo(struct soap *soap, ns1__ComplexTypeDemo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ComplexTypeDemo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (47)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (46)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (43)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (40)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_ns1__DemoMethod
#define SOAP_TYPE_ns1__DemoMethod (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DemoMethod(struct soap*, struct ns1__DemoMethod *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DemoMethod(struct soap*, const struct ns1__DemoMethod *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DemoMethod(struct soap*, const char*, int, const struct ns1__DemoMethod *, const char*);
SOAP_FMAC3 struct ns1__DemoMethod * SOAP_FMAC4 soap_in_ns1__DemoMethod(struct soap*, const char*, struct ns1__DemoMethod *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DemoMethod(struct soap*, const struct ns1__DemoMethod *, const char*, const char*);

#ifndef soap_write_ns1__DemoMethod
#define soap_write_ns1__DemoMethod(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__DemoMethod(soap, data), 0) || soap_put_ns1__DemoMethod(soap, data, "ns1:DemoMethod", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__DemoMethod * SOAP_FMAC4 soap_get_ns1__DemoMethod(struct soap*, struct ns1__DemoMethod *, const char*, const char*);

#ifndef soap_read_ns1__DemoMethod
#define soap_read_ns1__DemoMethod(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__DemoMethod(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__DemoMethod * SOAP_FMAC2 soap_instantiate_ns1__DemoMethod(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DemoMethod * soap_new_ns1__DemoMethod(struct soap *soap, int n = -1) { return soap_instantiate_ns1__DemoMethod(soap, n, NULL, NULL, NULL); }

inline struct ns1__DemoMethod * soap_new_req_ns1__DemoMethod(struct soap *soap) { struct ns1__DemoMethod *_p = soap_instantiate_ns1__DemoMethod(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__DemoMethod(soap, _p); } return _p; }

inline struct ns1__DemoMethod * soap_new_set_ns1__DemoMethod(struct soap *soap) { struct ns1__DemoMethod *_p = soap_instantiate_ns1__DemoMethod(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__DemoMethod(soap, _p); } return _p; }

inline void soap_delete_ns1__DemoMethod(struct soap *soap, struct ns1__DemoMethod *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__DemoMethod(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__DemoMethodResponse
#define SOAP_TYPE_ns1__DemoMethodResponse (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DemoMethodResponse(struct soap*, struct ns1__DemoMethodResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DemoMethodResponse(struct soap*, const struct ns1__DemoMethodResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DemoMethodResponse(struct soap*, const char*, int, const struct ns1__DemoMethodResponse *, const char*);
SOAP_FMAC3 struct ns1__DemoMethodResponse * SOAP_FMAC4 soap_in_ns1__DemoMethodResponse(struct soap*, const char*, struct ns1__DemoMethodResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DemoMethodResponse(struct soap*, const struct ns1__DemoMethodResponse *, const char*, const char*);

#ifndef soap_write_ns1__DemoMethodResponse
#define soap_write_ns1__DemoMethodResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__DemoMethodResponse(soap, data), 0) || soap_put_ns1__DemoMethodResponse(soap, data, "ns1:DemoMethodResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__DemoMethodResponse * SOAP_FMAC4 soap_get_ns1__DemoMethodResponse(struct soap*, struct ns1__DemoMethodResponse *, const char*, const char*);

#ifndef soap_read_ns1__DemoMethodResponse
#define soap_read_ns1__DemoMethodResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__DemoMethodResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__DemoMethodResponse * SOAP_FMAC2 soap_instantiate_ns1__DemoMethodResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__DemoMethodResponse * soap_new_ns1__DemoMethodResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__DemoMethodResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__DemoMethodResponse * soap_new_req_ns1__DemoMethodResponse(struct soap *soap) { struct ns1__DemoMethodResponse *_p = soap_instantiate_ns1__DemoMethodResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__DemoMethodResponse(soap, _p); } return _p; }

inline struct ns1__DemoMethodResponse * soap_new_set_ns1__DemoMethodResponse(struct soap *soap) { struct ns1__DemoMethodResponse *_p = soap_instantiate_ns1__DemoMethodResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__DemoMethodResponse(soap, _p); } return _p; }

inline void soap_delete_ns1__DemoMethodResponse(struct soap *soap, struct ns1__DemoMethodResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__DemoMethodResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__SayHello
#define SOAP_TYPE_ns1__SayHello (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SayHello(struct soap*, struct ns1__SayHello *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SayHello(struct soap*, const struct ns1__SayHello *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SayHello(struct soap*, const char*, int, const struct ns1__SayHello *, const char*);
SOAP_FMAC3 struct ns1__SayHello * SOAP_FMAC4 soap_in_ns1__SayHello(struct soap*, const char*, struct ns1__SayHello *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SayHello(struct soap*, const struct ns1__SayHello *, const char*, const char*);

#ifndef soap_write_ns1__SayHello
#define soap_write_ns1__SayHello(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__SayHello(soap, data), 0) || soap_put_ns1__SayHello(soap, data, "ns1:SayHello", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__SayHello * SOAP_FMAC4 soap_get_ns1__SayHello(struct soap*, struct ns1__SayHello *, const char*, const char*);

#ifndef soap_read_ns1__SayHello
#define soap_read_ns1__SayHello(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__SayHello(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__SayHello * SOAP_FMAC2 soap_instantiate_ns1__SayHello(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__SayHello * soap_new_ns1__SayHello(struct soap *soap, int n = -1) { return soap_instantiate_ns1__SayHello(soap, n, NULL, NULL, NULL); }

inline struct ns1__SayHello * soap_new_req_ns1__SayHello(struct soap *soap, const std::string& name) { struct ns1__SayHello *_p = soap_instantiate_ns1__SayHello(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__SayHello(soap, _p); _p->name = name; } return _p; }

inline struct ns1__SayHello * soap_new_set_ns1__SayHello(struct soap *soap, const std::string& name) { struct ns1__SayHello *_p = soap_instantiate_ns1__SayHello(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__SayHello(soap, _p); _p->name = name; } return _p; }

inline void soap_delete_ns1__SayHello(struct soap *soap, struct ns1__SayHello *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__SayHello(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__SayHelloResponse
#define SOAP_TYPE_ns1__SayHelloResponse (34)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SayHelloResponse(struct soap*, struct ns1__SayHelloResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SayHelloResponse(struct soap*, const struct ns1__SayHelloResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SayHelloResponse(struct soap*, const char*, int, const struct ns1__SayHelloResponse *, const char*);
SOAP_FMAC3 struct ns1__SayHelloResponse * SOAP_FMAC4 soap_in_ns1__SayHelloResponse(struct soap*, const char*, struct ns1__SayHelloResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SayHelloResponse(struct soap*, const struct ns1__SayHelloResponse *, const char*, const char*);

#ifndef soap_write_ns1__SayHelloResponse
#define soap_write_ns1__SayHelloResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__SayHelloResponse(soap, data), 0) || soap_put_ns1__SayHelloResponse(soap, data, "ns1:SayHelloResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__SayHelloResponse * SOAP_FMAC4 soap_get_ns1__SayHelloResponse(struct soap*, struct ns1__SayHelloResponse *, const char*, const char*);

#ifndef soap_read_ns1__SayHelloResponse
#define soap_read_ns1__SayHelloResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__SayHelloResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__SayHelloResponse * SOAP_FMAC2 soap_instantiate_ns1__SayHelloResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__SayHelloResponse * soap_new_ns1__SayHelloResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__SayHelloResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__SayHelloResponse * soap_new_req_ns1__SayHelloResponse(struct soap *soap, const std::string& return_) { struct ns1__SayHelloResponse *_p = soap_instantiate_ns1__SayHelloResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__SayHelloResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__SayHelloResponse * soap_new_set_ns1__SayHelloResponse(struct soap *soap, const std::string& return_) { struct ns1__SayHelloResponse *_p = soap_instantiate_ns1__SayHelloResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__SayHelloResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__SayHelloResponse(struct soap *soap, struct ns1__SayHelloResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__SayHelloResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__ComplexTypeArrayDemo
#define SOAP_TYPE_ns1__ComplexTypeArrayDemo (32)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__ComplexTypeArrayDemo(struct soap*, struct ns1__ComplexTypeArrayDemo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ComplexTypeArrayDemo(struct soap*, const struct ns1__ComplexTypeArrayDemo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ComplexTypeArrayDemo(struct soap*, const char*, int, const struct ns1__ComplexTypeArrayDemo *, const char*);
SOAP_FMAC3 struct ns1__ComplexTypeArrayDemo * SOAP_FMAC4 soap_in_ns1__ComplexTypeArrayDemo(struct soap*, const char*, struct ns1__ComplexTypeArrayDemo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ComplexTypeArrayDemo(struct soap*, const struct ns1__ComplexTypeArrayDemo *, const char*, const char*);

#ifndef soap_write_ns1__ComplexTypeArrayDemo
#define soap_write_ns1__ComplexTypeArrayDemo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__ComplexTypeArrayDemo(soap, data), 0) || soap_put_ns1__ComplexTypeArrayDemo(soap, data, "ns1:ComplexTypeArrayDemo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__ComplexTypeArrayDemo * SOAP_FMAC4 soap_get_ns1__ComplexTypeArrayDemo(struct soap*, struct ns1__ComplexTypeArrayDemo *, const char*, const char*);

#ifndef soap_read_ns1__ComplexTypeArrayDemo
#define soap_read_ns1__ComplexTypeArrayDemo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__ComplexTypeArrayDemo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__ComplexTypeArrayDemo * SOAP_FMAC2 soap_instantiate_ns1__ComplexTypeArrayDemo(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__ComplexTypeArrayDemo * soap_new_ns1__ComplexTypeArrayDemo(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ComplexTypeArrayDemo(soap, n, NULL, NULL, NULL); }

inline struct ns1__ComplexTypeArrayDemo * soap_new_req_ns1__ComplexTypeArrayDemo(struct soap *soap) { struct ns1__ComplexTypeArrayDemo *_p = soap_instantiate_ns1__ComplexTypeArrayDemo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__ComplexTypeArrayDemo(soap, _p); } return _p; }

inline struct ns1__ComplexTypeArrayDemo * soap_new_set_ns1__ComplexTypeArrayDemo(struct soap *soap, ComplexTypeDemoArray *arr) { struct ns1__ComplexTypeArrayDemo *_p = soap_instantiate_ns1__ComplexTypeArrayDemo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__ComplexTypeArrayDemo(soap, _p); _p->arr = arr; } return _p; }

inline void soap_delete_ns1__ComplexTypeArrayDemo(struct soap *soap, struct ns1__ComplexTypeArrayDemo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ComplexTypeArrayDemo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__ComplexTypeArrayDemoResponse
#define SOAP_TYPE_ns1__ComplexTypeArrayDemoResponse (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__ComplexTypeArrayDemoResponse(struct soap*, struct ns1__ComplexTypeArrayDemoResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ComplexTypeArrayDemoResponse(struct soap*, const struct ns1__ComplexTypeArrayDemoResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ComplexTypeArrayDemoResponse(struct soap*, const char*, int, const struct ns1__ComplexTypeArrayDemoResponse *, const char*);
SOAP_FMAC3 struct ns1__ComplexTypeArrayDemoResponse * SOAP_FMAC4 soap_in_ns1__ComplexTypeArrayDemoResponse(struct soap*, const char*, struct ns1__ComplexTypeArrayDemoResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ComplexTypeArrayDemoResponse(struct soap*, const struct ns1__ComplexTypeArrayDemoResponse *, const char*, const char*);

#ifndef soap_write_ns1__ComplexTypeArrayDemoResponse
#define soap_write_ns1__ComplexTypeArrayDemoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__ComplexTypeArrayDemoResponse(soap, data), 0) || soap_put_ns1__ComplexTypeArrayDemoResponse(soap, data, "ns1:ComplexTypeArrayDemoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__ComplexTypeArrayDemoResponse * SOAP_FMAC4 soap_get_ns1__ComplexTypeArrayDemoResponse(struct soap*, struct ns1__ComplexTypeArrayDemoResponse *, const char*, const char*);

#ifndef soap_read_ns1__ComplexTypeArrayDemoResponse
#define soap_read_ns1__ComplexTypeArrayDemoResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__ComplexTypeArrayDemoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__ComplexTypeArrayDemoResponse * SOAP_FMAC2 soap_instantiate_ns1__ComplexTypeArrayDemoResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__ComplexTypeArrayDemoResponse * soap_new_ns1__ComplexTypeArrayDemoResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ComplexTypeArrayDemoResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__ComplexTypeArrayDemoResponse * soap_new_req_ns1__ComplexTypeArrayDemoResponse(struct soap *soap) { struct ns1__ComplexTypeArrayDemoResponse *_p = soap_instantiate_ns1__ComplexTypeArrayDemoResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__ComplexTypeArrayDemoResponse(soap, _p); } return _p; }

inline struct ns1__ComplexTypeArrayDemoResponse * soap_new_set_ns1__ComplexTypeArrayDemoResponse(struct soap *soap, stringArray *return_) { struct ns1__ComplexTypeArrayDemoResponse *_p = soap_instantiate_ns1__ComplexTypeArrayDemoResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__ComplexTypeArrayDemoResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__ComplexTypeArrayDemoResponse(struct soap *soap, struct ns1__ComplexTypeArrayDemoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ComplexTypeArrayDemoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__PrintComplexType
#define SOAP_TYPE_ns1__PrintComplexType (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__PrintComplexType(struct soap*, struct ns1__PrintComplexType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__PrintComplexType(struct soap*, const struct ns1__PrintComplexType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PrintComplexType(struct soap*, const char*, int, const struct ns1__PrintComplexType *, const char*);
SOAP_FMAC3 struct ns1__PrintComplexType * SOAP_FMAC4 soap_in_ns1__PrintComplexType(struct soap*, const char*, struct ns1__PrintComplexType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__PrintComplexType(struct soap*, const struct ns1__PrintComplexType *, const char*, const char*);

#ifndef soap_write_ns1__PrintComplexType
#define soap_write_ns1__PrintComplexType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__PrintComplexType(soap, data), 0) || soap_put_ns1__PrintComplexType(soap, data, "ns1:PrintComplexType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__PrintComplexType * SOAP_FMAC4 soap_get_ns1__PrintComplexType(struct soap*, struct ns1__PrintComplexType *, const char*, const char*);

#ifndef soap_read_ns1__PrintComplexType
#define soap_read_ns1__PrintComplexType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__PrintComplexType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__PrintComplexType * SOAP_FMAC2 soap_instantiate_ns1__PrintComplexType(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__PrintComplexType * soap_new_ns1__PrintComplexType(struct soap *soap, int n = -1) { return soap_instantiate_ns1__PrintComplexType(soap, n, NULL, NULL, NULL); }

inline struct ns1__PrintComplexType * soap_new_req_ns1__PrintComplexType(struct soap *soap) { struct ns1__PrintComplexType *_p = soap_instantiate_ns1__PrintComplexType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__PrintComplexType(soap, _p); } return _p; }

inline struct ns1__PrintComplexType * soap_new_set_ns1__PrintComplexType(struct soap *soap, ns1__ComplexTypeDemo *obj) { struct ns1__PrintComplexType *_p = soap_instantiate_ns1__PrintComplexType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__PrintComplexType(soap, _p); _p->obj = obj; } return _p; }

inline void soap_delete_ns1__PrintComplexType(struct soap *soap, struct ns1__PrintComplexType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__PrintComplexType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__PrintComplexTypeResponse
#define SOAP_TYPE_ns1__PrintComplexTypeResponse (25)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__PrintComplexTypeResponse(struct soap*, struct ns1__PrintComplexTypeResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__PrintComplexTypeResponse(struct soap*, const struct ns1__PrintComplexTypeResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PrintComplexTypeResponse(struct soap*, const char*, int, const struct ns1__PrintComplexTypeResponse *, const char*);
SOAP_FMAC3 struct ns1__PrintComplexTypeResponse * SOAP_FMAC4 soap_in_ns1__PrintComplexTypeResponse(struct soap*, const char*, struct ns1__PrintComplexTypeResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__PrintComplexTypeResponse(struct soap*, const struct ns1__PrintComplexTypeResponse *, const char*, const char*);

#ifndef soap_write_ns1__PrintComplexTypeResponse
#define soap_write_ns1__PrintComplexTypeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__PrintComplexTypeResponse(soap, data), 0) || soap_put_ns1__PrintComplexTypeResponse(soap, data, "ns1:PrintComplexTypeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__PrintComplexTypeResponse * SOAP_FMAC4 soap_get_ns1__PrintComplexTypeResponse(struct soap*, struct ns1__PrintComplexTypeResponse *, const char*, const char*);

#ifndef soap_read_ns1__PrintComplexTypeResponse
#define soap_read_ns1__PrintComplexTypeResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__PrintComplexTypeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__PrintComplexTypeResponse * SOAP_FMAC2 soap_instantiate_ns1__PrintComplexTypeResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__PrintComplexTypeResponse * soap_new_ns1__PrintComplexTypeResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__PrintComplexTypeResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__PrintComplexTypeResponse * soap_new_req_ns1__PrintComplexTypeResponse(struct soap *soap, const std::string& return_) { struct ns1__PrintComplexTypeResponse *_p = soap_instantiate_ns1__PrintComplexTypeResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__PrintComplexTypeResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__PrintComplexTypeResponse * soap_new_set_ns1__PrintComplexTypeResponse(struct soap *soap, const std::string& return_) { struct ns1__PrintComplexTypeResponse *_p = soap_instantiate_ns1__PrintComplexTypeResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__PrintComplexTypeResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__PrintComplexTypeResponse(struct soap *soap, struct ns1__PrintComplexTypeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__PrintComplexTypeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__GetComplexType
#define SOAP_TYPE_ns1__GetComplexType (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetComplexType(struct soap*, struct ns1__GetComplexType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetComplexType(struct soap*, const struct ns1__GetComplexType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetComplexType(struct soap*, const char*, int, const struct ns1__GetComplexType *, const char*);
SOAP_FMAC3 struct ns1__GetComplexType * SOAP_FMAC4 soap_in_ns1__GetComplexType(struct soap*, const char*, struct ns1__GetComplexType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetComplexType(struct soap*, const struct ns1__GetComplexType *, const char*, const char*);

#ifndef soap_write_ns1__GetComplexType
#define soap_write_ns1__GetComplexType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__GetComplexType(soap, data), 0) || soap_put_ns1__GetComplexType(soap, data, "ns1:GetComplexType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__GetComplexType * SOAP_FMAC4 soap_get_ns1__GetComplexType(struct soap*, struct ns1__GetComplexType *, const char*, const char*);

#ifndef soap_read_ns1__GetComplexType
#define soap_read_ns1__GetComplexType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__GetComplexType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__GetComplexType * SOAP_FMAC2 soap_instantiate_ns1__GetComplexType(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetComplexType * soap_new_ns1__GetComplexType(struct soap *soap, int n = -1) { return soap_instantiate_ns1__GetComplexType(soap, n, NULL, NULL, NULL); }

inline struct ns1__GetComplexType * soap_new_req_ns1__GetComplexType(struct soap *soap) { struct ns1__GetComplexType *_p = soap_instantiate_ns1__GetComplexType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__GetComplexType(soap, _p); } return _p; }

inline struct ns1__GetComplexType * soap_new_set_ns1__GetComplexType(struct soap *soap) { struct ns1__GetComplexType *_p = soap_instantiate_ns1__GetComplexType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__GetComplexType(soap, _p); } return _p; }

inline void soap_delete_ns1__GetComplexType(struct soap *soap, struct ns1__GetComplexType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__GetComplexType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__GetComplexTypeResponse
#define SOAP_TYPE_ns1__GetComplexTypeResponse (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__GetComplexTypeResponse(struct soap*, struct ns1__GetComplexTypeResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__GetComplexTypeResponse(struct soap*, const struct ns1__GetComplexTypeResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetComplexTypeResponse(struct soap*, const char*, int, const struct ns1__GetComplexTypeResponse *, const char*);
SOAP_FMAC3 struct ns1__GetComplexTypeResponse * SOAP_FMAC4 soap_in_ns1__GetComplexTypeResponse(struct soap*, const char*, struct ns1__GetComplexTypeResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__GetComplexTypeResponse(struct soap*, const struct ns1__GetComplexTypeResponse *, const char*, const char*);

#ifndef soap_write_ns1__GetComplexTypeResponse
#define soap_write_ns1__GetComplexTypeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__GetComplexTypeResponse(soap, data), 0) || soap_put_ns1__GetComplexTypeResponse(soap, data, "ns1:GetComplexTypeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__GetComplexTypeResponse * SOAP_FMAC4 soap_get_ns1__GetComplexTypeResponse(struct soap*, struct ns1__GetComplexTypeResponse *, const char*, const char*);

#ifndef soap_read_ns1__GetComplexTypeResponse
#define soap_read_ns1__GetComplexTypeResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__GetComplexTypeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__GetComplexTypeResponse * SOAP_FMAC2 soap_instantiate_ns1__GetComplexTypeResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__GetComplexTypeResponse * soap_new_ns1__GetComplexTypeResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__GetComplexTypeResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__GetComplexTypeResponse * soap_new_req_ns1__GetComplexTypeResponse(struct soap *soap) { struct ns1__GetComplexTypeResponse *_p = soap_instantiate_ns1__GetComplexTypeResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__GetComplexTypeResponse(soap, _p); } return _p; }

inline struct ns1__GetComplexTypeResponse * soap_new_set_ns1__GetComplexTypeResponse(struct soap *soap, ns1__ComplexTypeDemo *return_) { struct ns1__GetComplexTypeResponse *_p = soap_instantiate_ns1__GetComplexTypeResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__GetComplexTypeResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__GetComplexTypeResponse(struct soap *soap, struct ns1__GetComplexTypeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__GetComplexTypeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (49)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data), 0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (48)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data), 0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data), 0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerToComplexTypeDemoArray
#define SOAP_TYPE_PointerToComplexTypeDemoArray (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToComplexTypeDemoArray(struct soap*, ComplexTypeDemoArray *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToComplexTypeDemoArray(struct soap*, const char *, int, ComplexTypeDemoArray *const*, const char *);
SOAP_FMAC3 ComplexTypeDemoArray ** SOAP_FMAC4 soap_in_PointerToComplexTypeDemoArray(struct soap*, const char*, ComplexTypeDemoArray **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToComplexTypeDemoArray(struct soap*, ComplexTypeDemoArray *const*, const char*, const char*);

#ifndef soap_write_PointerToComplexTypeDemoArray
#define soap_write_PointerToComplexTypeDemoArray(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToComplexTypeDemoArray(soap, data), 0) || soap_put_PointerToComplexTypeDemoArray(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ComplexTypeDemoArray ** SOAP_FMAC4 soap_get_PointerToComplexTypeDemoArray(struct soap*, ComplexTypeDemoArray **, const char*, const char*);

#ifndef soap_read_PointerToComplexTypeDemoArray
#define soap_read_PointerToComplexTypeDemoArray(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToComplexTypeDemoArray(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostringArray
#define SOAP_TYPE_PointerTostringArray (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostringArray(struct soap*, stringArray *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostringArray(struct soap*, const char *, int, stringArray *const*, const char *);
SOAP_FMAC3 stringArray ** SOAP_FMAC4 soap_in_PointerTostringArray(struct soap*, const char*, stringArray **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostringArray(struct soap*, stringArray *const*, const char*, const char*);

#ifndef soap_write_PointerTostringArray
#define soap_write_PointerTostringArray(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostringArray(soap, data), 0) || soap_put_PointerTostringArray(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 stringArray ** SOAP_FMAC4 soap_get_PointerTostringArray(struct soap*, stringArray **, const char*, const char*);

#ifndef soap_read_PointerTostringArray
#define soap_read_PointerTostringArray(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostringArray(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToint
#define SOAP_TYPE_PointerToint (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);

#ifndef soap_write_PointerToint
#define soap_write_PointerToint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToint(soap, data), 0) || soap_put_PointerToint(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);

#ifndef soap_read_PointerToint
#define soap_read_PointerToint(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTons1__ComplexTypeDemo
#define SOAP_TYPE_PointerToPointerTons1__ComplexTypeDemo (17)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__ComplexTypeDemo(struct soap*, ns1__ComplexTypeDemo **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__ComplexTypeDemo(struct soap*, const char *, int, ns1__ComplexTypeDemo **const*, const char *);
SOAP_FMAC3 ns1__ComplexTypeDemo *** SOAP_FMAC4 soap_in_PointerToPointerTons1__ComplexTypeDemo(struct soap*, const char*, ns1__ComplexTypeDemo ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__ComplexTypeDemo(struct soap*, ns1__ComplexTypeDemo **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTons1__ComplexTypeDemo
#define soap_write_PointerToPointerTons1__ComplexTypeDemo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToPointerTons1__ComplexTypeDemo(soap, data), 0) || soap_put_PointerToPointerTons1__ComplexTypeDemo(soap, data, "ns1:ComplexTypeDemo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ComplexTypeDemo *** SOAP_FMAC4 soap_get_PointerToPointerTons1__ComplexTypeDemo(struct soap*, ns1__ComplexTypeDemo ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTons1__ComplexTypeDemo
#define soap_read_PointerToPointerTons1__ComplexTypeDemo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTons1__ComplexTypeDemo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__ComplexTypeDemo
#define SOAP_TYPE_PointerTons1__ComplexTypeDemo (16)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ComplexTypeDemo(struct soap*, ns1__ComplexTypeDemo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ComplexTypeDemo(struct soap*, const char *, int, ns1__ComplexTypeDemo *const*, const char *);
SOAP_FMAC3 ns1__ComplexTypeDemo ** SOAP_FMAC4 soap_in_PointerTons1__ComplexTypeDemo(struct soap*, const char*, ns1__ComplexTypeDemo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ComplexTypeDemo(struct soap*, ns1__ComplexTypeDemo *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__ComplexTypeDemo
#define soap_write_PointerTons1__ComplexTypeDemo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__ComplexTypeDemo(soap, data), 0) || soap_put_PointerTons1__ComplexTypeDemo(soap, data, "ns1:ComplexTypeDemo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ComplexTypeDemo ** SOAP_FMAC4 soap_get_PointerTons1__ComplexTypeDemo(struct soap*, ns1__ComplexTypeDemo **, const char*, const char*);

#ifndef soap_read_PointerTons1__ComplexTypeDemo
#define soap_read_PointerTons1__ComplexTypeDemo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__ComplexTypeDemo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (13)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__string
#define soap_write_PointerTostd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__string(soap, data), 0) || soap_put_PointerTostd__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTostd__string
#define soap_read_PointerTostd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data), 0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data), 0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

/* End of soapH.h */
