/* soapStub.h
   Generated by gSOAP 2.8.23 from test.hpp

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://brzeszczot.net/open/"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20823
# error "GSOAP VERSION 20823 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_stringArray
#define SOAP_TYPE_stringArray (8)
/* SOAP encoded array of xsd:string schema type: */
class SOAP_CMAC stringArray
{
public:
	std::string *__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique type id SOAP_TYPE_stringArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         stringArray() { stringArray::soap_default(NULL); }
	virtual ~stringArray() { }
};
#endif

#ifndef SOAP_TYPE_ns1__AccountAuthResponse
#define SOAP_TYPE_ns1__AccountAuthResponse (12)
/* ns1:AccountAuthResponse */
struct ns1__AccountAuthResponse
{
public:
	stringArray *_return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfstring */
public:
	int soap_type() const { return 12; } /* = unique type id SOAP_TYPE_ns1__AccountAuthResponse */
};
#endif

#ifndef SOAP_TYPE_ns1__AccountAuth
#define SOAP_TYPE_ns1__AccountAuth (16)
/* ns1:AccountAuth */
struct ns1__AccountAuth
{
public:
	std::string _email;	/* required element of type xsd:string */
	std::string _pass;	/* required element of type xsd:string */
public:
	int soap_type() const { return 16; } /* = unique type id SOAP_TYPE_ns1__AccountAuth */
};
#endif

#ifndef SOAP_TYPE_ns1__SendWordResponse
#define SOAP_TYPE_ns1__SendWordResponse (17)
/* ns1:SendWordResponse */
struct ns1__SendWordResponse
{
public:
	stringArray *_return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfstring */
public:
	int soap_type() const { return 17; } /* = unique type id SOAP_TYPE_ns1__SendWordResponse */
};
#endif

#ifndef SOAP_TYPE_ns1__SendWord
#define SOAP_TYPE_ns1__SendWord (20)
/* ns1:SendWord */
struct ns1__SendWord
{
public:
	std::string _word_USCOREa;	/* required element of type xsd:string */
	std::string _word_USCOREb;	/* required element of type xsd:string */
	std::string _lang_USCOREa;	/* required element of type xsd:string */
	std::string _lang_USCOREb;	/* required element of type xsd:string */
public:
	int soap_type() const { return 20; } /* = unique type id SOAP_TYPE_ns1__SendWord */
};
#endif

#ifndef SOAP_TYPE_ns1__GetWordResponse
#define SOAP_TYPE_ns1__GetWordResponse (21)
/* ns1:GetWordResponse */
struct ns1__GetWordResponse
{
public:
	stringArray *_return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfstring */
public:
	int soap_type() const { return 21; } /* = unique type id SOAP_TYPE_ns1__GetWordResponse */
};
#endif

#ifndef SOAP_TYPE_ns1__GetWord
#define SOAP_TYPE_ns1__GetWord (24)
/* ns1:GetWord */
struct ns1__GetWord
{
public:
	std::string _range;	/* required element of type xsd:string */
	stringArray *_opt;	/* optional element of type ArrayOfstring */
public:
	int soap_type() const { return 24; } /* = unique type id SOAP_TYPE_ns1__GetWord */
};
#endif

#ifndef SOAP_TYPE_ns1__PlayWordResponse
#define SOAP_TYPE_ns1__PlayWordResponse (25)
/* ns1:PlayWordResponse */
struct ns1__PlayWordResponse
{
public:
	stringArray *_return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfstring */
public:
	int soap_type() const { return 25; } /* = unique type id SOAP_TYPE_ns1__PlayWordResponse */
};
#endif

#ifndef SOAP_TYPE_ns1__PlayWord
#define SOAP_TYPE_ns1__PlayWord (28)
/* ns1:PlayWord */
struct ns1__PlayWord
{
public:
	int _id;	/* required element of type xsd:int */
	int _value;	/* required element of type xsd:int */
	int _direction;	/* required element of type xsd:int */
public:
	int soap_type() const { return 28; } /* = unique type id SOAP_TYPE_ns1__PlayWord */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (29)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 29; } /* = unique type id SOAP_TYPE_SOAP_ENV__Header */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (30)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 30; } /* = unique type id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (32)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 32; } /* = unique type id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (35)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 35; } /* = unique type id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (36)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 36; } /* = unique type id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 ns1__AccountAuth(struct soap*, std::string _email, std::string _pass, struct ns1__AccountAuthResponse &_param_1);

SOAP_FMAC5 int SOAP_FMAC6 ns1__SendWord(struct soap*, std::string _word_USCOREa, std::string _word_USCOREb, std::string _lang_USCOREa, std::string _lang_USCOREb, struct ns1__SendWordResponse &_param_2);

SOAP_FMAC5 int SOAP_FMAC6 ns1__GetWord(struct soap*, std::string _range, stringArray *_opt, struct ns1__GetWordResponse &_param_3);

SOAP_FMAC5 int SOAP_FMAC6 ns1__PlayWord(struct soap*, int _id, int _value, int _direction, struct ns1__PlayWordResponse &_param_4);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__AccountAuth(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__SendWord(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__GetWord(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__PlayWord(struct soap*);

/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__AccountAuth(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _email, std::string _pass, struct ns1__AccountAuthResponse &_param_1);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__SendWord(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _word_USCOREa, std::string _word_USCOREb, std::string _lang_USCOREa, std::string _lang_USCOREb, struct ns1__SendWordResponse &_param_2);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__GetWord(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _range, stringArray *_opt, struct ns1__GetWordResponse &_param_3);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__PlayWord(struct soap *soap, const char *soap_endpoint, const char *soap_action, int _id, int _value, int _direction, struct ns1__PlayWordResponse &_param_4);

#endif

/* End of soapStub.h */
