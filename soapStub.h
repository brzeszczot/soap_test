/* soapStub.h
   Generated by gSOAP 2.8.23 from test.hpp

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://brzeszczot.net/open/php-wsdl-2.3/"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20823
# error "GSOAP VERSION 20823 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns1__ComplexTypeDemo
#define SOAP_TYPE_ns1__ComplexTypeDemo (8)
/* ns1:ComplexTypeDemo */
class SOAP_CMAC ns1__ComplexTypeDemo
{
public:
	std::string *StringA;	/* required element of type xsd:string */
	std::string *StringB;	/* required element of type xsd:string */
	int Integer;	/* required element of type xsd:int */
	bool Boolean;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique type id SOAP_TYPE_ns1__ComplexTypeDemo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ComplexTypeDemo() { ns1__ComplexTypeDemo::soap_default(NULL); }
	virtual ~ns1__ComplexTypeDemo() { }
};
#endif

#ifndef SOAP_TYPE_stringArray
#define SOAP_TYPE_stringArray (9)
/* SOAP encoded array of xsd:string schema type: */
class SOAP_CMAC stringArray
{
public:
	std::string *__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique type id SOAP_TYPE_stringArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         stringArray() { stringArray::soap_default(NULL); }
	virtual ~stringArray() { }
};
#endif

#ifndef SOAP_TYPE_ComplexTypeDemoArray
#define SOAP_TYPE_ComplexTypeDemoArray (10)
/* SOAP encoded array of ns1:ComplexTypeDemo schema type: */
class SOAP_CMAC ComplexTypeDemoArray
{
public:
	ns1__ComplexTypeDemo **__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique type id SOAP_TYPE_ComplexTypeDemoArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ComplexTypeDemoArray() { ComplexTypeDemoArray::soap_default(NULL); }
	virtual ~ComplexTypeDemoArray() { }
};
#endif

#ifndef SOAP_TYPE_arrayOfInt
#define SOAP_TYPE_arrayOfInt (11)
/* SOAP encoded array of xsd:int schema type: */
class SOAP_CMAC arrayOfInt
{
public:
	int *__ptr;
	int __size;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique type id SOAP_TYPE_arrayOfInt */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         arrayOfInt() { arrayOfInt::soap_default(NULL); }
	virtual ~arrayOfInt() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetComplexTypeResponse
#define SOAP_TYPE_ns1__GetComplexTypeResponse (19)
/* ns1:GetComplexTypeResponse */
struct ns1__GetComplexTypeResponse
{
public:
	ns1__ComplexTypeDemo *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ComplexTypeDemo */
public:
	int soap_type() const { return 19; } /* = unique type id SOAP_TYPE_ns1__GetComplexTypeResponse */
};
#endif

#ifndef SOAP_TYPE_ns1__GetComplexType
#define SOAP_TYPE_ns1__GetComplexType (22)
/* ns1:GetComplexType */
struct ns1__GetComplexType
{
public:
	int soap_type() const { return 22; } /* = unique type id SOAP_TYPE_ns1__GetComplexType */
};
#endif

#ifndef SOAP_TYPE_ns1__PrintComplexTypeResponse
#define SOAP_TYPE_ns1__PrintComplexTypeResponse (25)
/* ns1:PrintComplexTypeResponse */
struct ns1__PrintComplexTypeResponse
{
public:
	std::string return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
public:
	int soap_type() const { return 25; } /* = unique type id SOAP_TYPE_ns1__PrintComplexTypeResponse */
};
#endif

#ifndef SOAP_TYPE_ns1__PrintComplexType
#define SOAP_TYPE_ns1__PrintComplexType (26)
/* ns1:PrintComplexType */
struct ns1__PrintComplexType
{
public:
	ns1__ComplexTypeDemo *obj;	/* optional element of type ns1:ComplexTypeDemo */
public:
	int soap_type() const { return 26; } /* = unique type id SOAP_TYPE_ns1__PrintComplexType */
};
#endif

#ifndef SOAP_TYPE_ns1__ComplexTypeArrayDemoResponse
#define SOAP_TYPE_ns1__ComplexTypeArrayDemoResponse (27)
/* ns1:ComplexTypeArrayDemoResponse */
struct ns1__ComplexTypeArrayDemoResponse
{
public:
	stringArray *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ArrayOfstring */
public:
	int soap_type() const { return 27; } /* = unique type id SOAP_TYPE_ns1__ComplexTypeArrayDemoResponse */
};
#endif

#ifndef SOAP_TYPE_ns1__ComplexTypeArrayDemo
#define SOAP_TYPE_ns1__ComplexTypeArrayDemo (32)
/* ns1:ComplexTypeArrayDemo */
struct ns1__ComplexTypeArrayDemo
{
public:
	ComplexTypeDemoArray *arr;	/* optional element of type ArrayOfComplexTypeDemo */
public:
	int soap_type() const { return 32; } /* = unique type id SOAP_TYPE_ns1__ComplexTypeArrayDemo */
};
#endif

#ifndef SOAP_TYPE_ns1__SayHelloResponse
#define SOAP_TYPE_ns1__SayHelloResponse (34)
/* ns1:SayHelloResponse */
struct ns1__SayHelloResponse
{
public:
	std::string return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
public:
	int soap_type() const { return 34; } /* = unique type id SOAP_TYPE_ns1__SayHelloResponse */
};
#endif

#ifndef SOAP_TYPE_ns1__SayHello
#define SOAP_TYPE_ns1__SayHello (35)
/* ns1:SayHello */
struct ns1__SayHello
{
public:
	std::string name;	/* required element of type xsd:string */
public:
	int soap_type() const { return 35; } /* = unique type id SOAP_TYPE_ns1__SayHello */
};
#endif

#ifndef SOAP_TYPE_ns1__DemoMethodResponse
#define SOAP_TYPE_ns1__DemoMethodResponse (36)
/* ns1:DemoMethodResponse */
struct ns1__DemoMethodResponse
{
public:
	int soap_type() const { return 36; } /* = unique type id SOAP_TYPE_ns1__DemoMethodResponse */
};
#endif

#ifndef SOAP_TYPE_ns1__DemoMethod
#define SOAP_TYPE_ns1__DemoMethod (39)
/* ns1:DemoMethod */
struct ns1__DemoMethod
{
public:
	int soap_type() const { return 39; } /* = unique type id SOAP_TYPE_ns1__DemoMethod */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (40)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 40; } /* = unique type id SOAP_TYPE_SOAP_ENV__Header */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (41)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 41; } /* = unique type id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (43)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 43; } /* = unique type id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (46)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 46; } /* = unique type id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (47)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 47; } /* = unique type id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 ns1__GetComplexType(struct soap*, struct ns1__GetComplexTypeResponse &_param_1);

SOAP_FMAC5 int SOAP_FMAC6 ns1__PrintComplexType(struct soap*, ns1__ComplexTypeDemo *obj, std::string &return_);

SOAP_FMAC5 int SOAP_FMAC6 ns1__ComplexTypeArrayDemo(struct soap*, ComplexTypeDemoArray *arr, struct ns1__ComplexTypeArrayDemoResponse &_param_2);

SOAP_FMAC5 int SOAP_FMAC6 ns1__SayHello(struct soap*, std::string name, std::string &return_);

SOAP_FMAC5 int SOAP_FMAC6 ns1__DemoMethod(struct soap*, struct ns1__DemoMethodResponse &_param_3);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__GetComplexType(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__PrintComplexType(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__ComplexTypeArrayDemo(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__SayHello(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__DemoMethod(struct soap*);

/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__GetComplexType(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns1__GetComplexTypeResponse &_param_1);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__PrintComplexType(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__ComplexTypeDemo *obj, std::string &return_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__ComplexTypeArrayDemo(struct soap *soap, const char *soap_endpoint, const char *soap_action, ComplexTypeDemoArray *arr, struct ns1__ComplexTypeArrayDemoResponse &_param_2);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__SayHello(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string name, std::string &return_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__DemoMethod(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct ns1__DemoMethodResponse &_param_3);

#endif

/* End of soapStub.h */
