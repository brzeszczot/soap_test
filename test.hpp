// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* test.hpp
   Generated by wsdl2h 2.8.23 from http://brzeszczot.net/open/server.php?WSDL and typemap.dat
   2015-11-06 13:32:32 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2015 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on test.hpp to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following licenses:
GPL or Genivia's license for commercial use.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://brzeszczot.net/open/                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://brzeszczot.net/open/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://brzeszczot.net/open/"
//gsoap ns1   schema namespace:	http://brzeszczot.net/open/
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class stringArray.
class stringArray;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://brzeszczot.net/open/                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://brzeszczot.net/open/                                              *
 *                                                                            *
\******************************************************************************/

/// @brief "http://brzeszczot.net/open/":stringArray is a complexType with complexContent restriction of XSD type SOAP-ENC:Array.
///
/// <PRE><BLOCKQUOTE>
///   A string array type
/// </BLOCKQUOTE></PRE>
/// class stringArray operations:
/// - soap_new_stringArray(soap*) allocate
/// - soap_new_stringArray(soap*, int num) allocate array
/// - soap_new_req_stringArray(soap*, ...) allocate, set required members
/// - soap_new_set_stringArray(soap*, ...) allocate, set all public members
/// - int soap_read_stringArray(soap*, stringArray*) deserialize from a stream
/// - int soap_write_stringArray(soap, stringArray*) serialize to a stream
/// SOAP encoded array of xs:string.
class stringArray
{ public:
/// Pointer to array of std::string.
    std::string                         *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://brzeszczot.net/open/                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://brzeszczot.net/open/                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	SoapSoap 
//gsoap ns1  service type:	SoapSoap 
//gsoap ns1  service port:	http://brzeszczot.net/open/server.php 
//gsoap ns1  service namespace:	http://brzeszczot.net/open/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref SoapSoap

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page SoapSoap Binding "SoapSoap"

@section SoapSoap_operations Operations of Binding "SoapSoap"

  - @ref ns1__AccountAuth

  - @ref ns1__SendWord

  - @ref ns1__GetWord

  - @ref ns1__PlayWord

@section SoapSoap_ports Endpoints of Binding "SoapSoap"

  - http://brzeszczot.net/open/server.php

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   SoapSoap                                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__AccountAuth                                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__AccountAuthResponse" of operation "ns1__AccountAuth".
struct ns1__AccountAuthResponse
{
    stringArray*                        _return_;
};

/** Operation "ns1__AccountAuth" of service binding "SoapSoap".
                AccountAuth method
            

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "http://brzeszczot.net/open/AccountAuth"

  - Addressing input action: "http://brzeszczot.net/open/AccountAuth"

  - Addressing output action: "http://brzeszczot.net/open/AccountAuthResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__AccountAuth(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         email,
    std::string                         pass,
    // output parameters:
    struct ns1__AccountAuthResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__AccountAuth(
    struct soap *soap,
    // input parameters:
    std::string                         email,
    std::string                         pass,
    // output parameters:
    struct ns1__AccountAuthResponse&
  );
@endcode

C++ proxy class (defined in soapSoapSoapProxy.h):
@code
  class SoapSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSoapSoapService.h):
@code
  class SoapSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	AccountAuth SOAP
//gsoap ns1  service method-style:	AccountAuth rpc
//gsoap ns1  service method-encoding:	AccountAuth http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	AccountAuth http://brzeszczot.net/open/AccountAuth
//gsoap ns1  service method-output-action:	AccountAuth http://brzeszczot.net/open/AccountAuthResponse
int ns1__AccountAuth(
    std::string                         _email,	///< Input parameter
    std::string                         _pass,	///< Input parameter
    struct ns1__AccountAuthResponse    &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__SendWord                                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__SendWordResponse" of operation "ns1__SendWord".
struct ns1__SendWordResponse
{
    stringArray*                        _return_;
};

/** Operation "ns1__SendWord" of service binding "SoapSoap".
                SendWord method
            

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "http://brzeszczot.net/open/SendWord"

  - Addressing input action: "http://brzeszczot.net/open/SendWord"

  - Addressing output action: "http://brzeszczot.net/open/SendWordResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__SendWord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         word_USCOREa,
    std::string                         word_USCOREb,
    std::string                         lang_USCOREa,
    std::string                         lang_USCOREb,
    // output parameters:
    struct ns1__SendWordResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__SendWord(
    struct soap *soap,
    // input parameters:
    std::string                         word_USCOREa,
    std::string                         word_USCOREb,
    std::string                         lang_USCOREa,
    std::string                         lang_USCOREb,
    // output parameters:
    struct ns1__SendWordResponse&
  );
@endcode

C++ proxy class (defined in soapSoapSoapProxy.h):
@code
  class SoapSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSoapSoapService.h):
@code
  class SoapSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SendWord SOAP
//gsoap ns1  service method-style:	SendWord rpc
//gsoap ns1  service method-encoding:	SendWord http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	SendWord http://brzeszczot.net/open/SendWord
//gsoap ns1  service method-output-action:	SendWord http://brzeszczot.net/open/SendWordResponse
int ns1__SendWord(
    std::string                         _word_USCOREa,	///< Input parameter
    std::string                         _word_USCOREb,	///< Input parameter
    std::string                         _lang_USCOREa,	///< Input parameter
    std::string                         _lang_USCOREb,	///< Input parameter
    struct ns1__SendWordResponse       &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetWord                                                             *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__GetWordResponse" of operation "ns1__GetWord".
struct ns1__GetWordResponse
{
    stringArray*                        _return_;
};

/** Operation "ns1__GetWord" of service binding "SoapSoap".
                GetWord method
            

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "http://brzeszczot.net/open/GetWord"

  - Addressing input action: "http://brzeszczot.net/open/GetWord"

  - Addressing output action: "http://brzeszczot.net/open/GetWordResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetWord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         range,
    stringArray*                        opt,
    // output parameters:
    struct ns1__GetWordResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetWord(
    struct soap *soap,
    // input parameters:
    std::string                         range,
    stringArray*                        opt,
    // output parameters:
    struct ns1__GetWordResponse&
  );
@endcode

C++ proxy class (defined in soapSoapSoapProxy.h):
@code
  class SoapSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSoapSoapService.h):
@code
  class SoapSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetWord SOAP
//gsoap ns1  service method-style:	GetWord rpc
//gsoap ns1  service method-encoding:	GetWord http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	GetWord http://brzeszczot.net/open/GetWord
//gsoap ns1  service method-output-action:	GetWord http://brzeszczot.net/open/GetWordResponse
int ns1__GetWord(
    std::string                         _range,	///< Input parameter
    stringArray*                        _opt,	///< Input parameter
    struct ns1__GetWordResponse        &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__PlayWord                                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__PlayWordResponse" of operation "ns1__PlayWord".
struct ns1__PlayWordResponse
{
    stringArray*                        _return_;
};

/** Operation "ns1__PlayWord" of service binding "SoapSoap".
                PlayWord method
            

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Action: "http://brzeszczot.net/open/PlayWord"

  - Addressing input action: "http://brzeszczot.net/open/PlayWord"

  - Addressing output action: "http://brzeszczot.net/open/PlayWordResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__PlayWord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    int                                 id,
    int                                 value,
    int                                 direction,
    // output parameters:
    struct ns1__PlayWordResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__PlayWord(
    struct soap *soap,
    // input parameters:
    int                                 id,
    int                                 value,
    int                                 direction,
    // output parameters:
    struct ns1__PlayWordResponse&
  );
@endcode

C++ proxy class (defined in soapSoapSoapProxy.h):
@code
  class SoapSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSoapSoapService.h):
@code
  class SoapSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	PlayWord SOAP
//gsoap ns1  service method-style:	PlayWord rpc
//gsoap ns1  service method-encoding:	PlayWord http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-input-action:	PlayWord http://brzeszczot.net/open/PlayWord
//gsoap ns1  service method-output-action:	PlayWord http://brzeszczot.net/open/PlayWordResponse
int ns1__PlayWord(
    int                                 _id,	///< Input parameter
    int                                 _value,	///< Input parameter
    int                                 _direction,	///< Input parameter
    struct ns1__PlayWordResponse       &	///< Output response struct parameter
);

/**

@page SoapSoap Binding "SoapSoap"

@section SoapSoap_policy_enablers Policy Enablers of Binding "SoapSoap"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read in XML and deserialized from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

Data can be serialized in XML and written to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://brzeszczot.net/open/"

*/

/* End of test.hpp */
