/* soapClient.cpp
   Generated by gSOAP 2.8.8 from wsd.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.8 2012-04-11 15:10:11 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns5__getStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string &getStatusReturn)
{	struct ns5__getStatus soap_tmp_ns5__getStatus;
	struct ns5__getStatusResponse *soap_tmp_ns5__getStatusResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://www.barnesandnobleinc.com/mbs/services/MbsLookup";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns5__getStatus(soap, &soap_tmp_ns5__getStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns5__getStatus(soap, &soap_tmp_ns5__getStatus, "ns5:getStatus", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns5__getStatus(soap, &soap_tmp_ns5__getStatus, "ns5:getStatus", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&getStatusReturn)
		return soap_closesock(soap);
	soap_default_std__string(soap, &getStatusReturn);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns5__getStatusResponse = soap_get_ns5__getStatusResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	getStatusReturn = soap_tmp_ns5__getStatusResponse->getStatusReturn;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns5__findStores(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _zipcode, struct ns5__findStoresResponse &_param_1)
{	struct ns5__findStores soap_tmp_ns5__findStores;
	if (!soap_endpoint)
		soap_endpoint = "http://www.barnesandnobleinc.com/mbs/services/MbsLookup";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns5__findStores._zipcode = _zipcode;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns5__findStores(soap, &soap_tmp_ns5__findStores);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns5__findStores(soap, &soap_tmp_ns5__findStores, "ns5:findStores", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns5__findStores(soap, &soap_tmp_ns5__findStores, "ns5:findStores", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_param_1)
		return soap_closesock(soap);
	soap_default_ns5__findStoresResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns5__findStoresResponse(soap, &_param_1, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
